@model Mvc.Models.mvcSellerBlankets
@{
    ViewBag.Title = "AddOrEdit";
}

<div class="page-container">
    <!-- Background Elements -->
    <div class="bg-shapes">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <div class="shape shape-3"></div>
        <div class="shape shape-4"></div>
    </div>

    <!-- Main Content -->
    <div class="page-content">
        <!-- Header Section -->
        <div class="page-header">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">
                        <svg width="40" height="40" viewBox="0 0 48 48" fill="none">
                            <path d="M24 4L44 14V34L24 44L4 34V14L24 4Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round" />
                            <path d="M24 4V44" stroke="currentColor" stroke-width="2" />
                            <path d="M4 14L44 34" stroke="currentColor" stroke-width="2" />
                            <path d="M44 14L4 34" stroke="currentColor" stroke-width="2" />
                        </svg>
                    </div>
                    <h1>Cozy Comfort</h1>
                </div>
                <p class="page-subtitle">Manage your premium blanket inventory with ease</p>
            </div>
        </div>

        <!-- Form Container -->
        <div class="form-container">
            <div class="form-wrapper">
                <div class="form-header">
                    <h2>Add or Edit Product</h2>
                    <p>Fill in the details to manage your blanket inventory</p>
                </div>

                @using (Html.BeginForm())
                {
                    @Html.HiddenFor(model => model.BlanketId)

                    <div class="form-content">
                        <!-- Product Name -->
                        <div class="form-group">
                            <div class="input-wrapper">
                                <div class="input-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                        <circle cx="12" cy="7" r="4"></circle>
                                    </svg>
                                </div>
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-input", @placeholder = "Enter product name" } })
                                @Html.LabelFor(model => model.Name, "Product Name", new { @class = "form-label" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "field-error" })
                        </div>

                        <!-- Description -->
                        <div class="form-group">
                            <div class="input-wrapper textarea-wrapper">
                                <div class="input-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                        <polyline points="14,2 14,8 20,8"></polyline>
                                        <line x1="16" y1="13" x2="8" y2="13"></line>
                                        <line x1="16" y1="17" x2="8" y2="17"></line>
                                        <polyline points="10,9 9,9 8,9"></polyline>
                                    </svg>
                                </div>
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-input form-textarea", @placeholder = "Describe your product in detail...", rows = 4 })
                                @Html.LabelFor(model => model.Description, "Product Description", new { @class = "form-label" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "field-error" })
                        </div>

                        <!-- Quantity and Price Row -->
                        <div class="form-row">
                            <!-- Quantity -->
                            <div class="form-group">
                                <div class="input-wrapper">
                                    <div class="input-icon">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                                            <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                                            <path d="M12 11h4"></path>
                                            <path d="M12 16h4"></path>
                                            <path d="M8 11h.01"></path>
                                            <path d="M8 16h.01"></path>
                                        </svg>
                                    </div>
                                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-input", @placeholder = "0", @type = "number", @min = "0" } })
                                    @Html.LabelFor(model => model.Quantity, "Quantity", new { @class = "form-label" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "field-error" })
                            </div>

                            <!-- Price -->
                            <div class="form-group">
                                <div class="input-wrapper">
                                    <div class="input-icon">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <line x1="12" y1="1" x2="12" y2="23"></line>
                                            <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                                        </svg>
                                    </div>
                                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-input", @placeholder = "0.00", @type = "number", @step = "0.01", @min = "0" } })
                                    @Html.LabelFor(model => model.Price, "Price ($)", new { @class = "form-label" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "field-error" })
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-actions">
                            <button type="submit" class="btn-primary">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="20,6 9,17 4,12"></polyline>
                                </svg>
                                <span>Save Product</span>
                            </button>
                            <button type="reset" class="btn-secondary">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="3,6 5,6 21,6"></polyline>
                                    <path d="M19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                                </svg>
                                <span>Clear Form</span>
                            </button>
                        </div>
                    </div>
                }

                <!-- Success/Error Messages -->
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22,4 12,14.01 9,11.01"></polyline>
                        </svg>
                        <span>@TempData["SuccessMessage"]</span>
                    </div>
                }
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-error">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                        <span>@TempData["ErrorMessage"]</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Enhanced form interactions
        document.querySelectorAll('.form-input').forEach(input => {
            input.addEventListener('focus', function () {
                this.parentElement.classList.add('focused');
            });

            input.addEventListener('blur', function () {
                if (!this.value) {
                    this.parentElement.classList.remove('focused');
                }
            });

            // Check if input has value on page load
            if (input.value) {
                input.parentElement.classList.add('focused');
            }
        });

        // Form validation enhancement
        document.querySelector('form').addEventListener('submit', function (e) {
            const submitBtn = document.querySelector('.btn-primary');
            submitBtn.style.transform = 'scale(0.98)';
            setTimeout(() => {
                submitBtn.style.transform = '';
            }, 150);
        });

        // Number input validation
        document.querySelectorAll('input[type="number"]').forEach(input => {
            input.addEventListener('input', function () {
                if (this.value < 0) {
                    this.value = 0;
                }
            });
        });
    </script>
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        overflow-x: hidden;
        background: linear-gradient(145deg, #ff7e5f 0%, #feb47b 50%, #d65f8d 100%); /* Sunset-inspired gradient */
        min-height: 100vh;
    }

    .page-container {
        min-height: 100vh;
        position: relative;
    }

    .bg-shapes {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 1;
    }

    .shape {
        position: absolute;
        border-radius: 30%;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        animation: float 7s ease-in-out infinite;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .shape-1 {
        width: 180px;
        height: 180px;
        top: 15%;
        left: 12%;
        animation-name: float1;
        animation-delay: 0s;
    }

    .shape-2 {
        width: 140px;
        height: 140px;
        top: 25%;
        right: 10%;
        animation-name: float2;
        animation-delay: 1.5s;
    }

    .shape-3 {
        width: 90px;
        height: 90px;
        bottom: 25%;
        left: 15%;
        animation-name: float3;
        animation-delay: 3s;
    }

    .shape-4 {
        width: 110px;
        height: 110px;
        bottom: 15%;
        right: 20%;
        animation-name: float4;
        animation-delay: 0.5s;
    }

    keyframes float1 {
        0%, 100% { transform: translate(0, 0) rotate(0deg); }
        50% { transform: translate(-15px, -25px) rotate(90deg); }
    }

    keyframes float2 {
        0%, 100% { transform: translate(0, 0) rotate(0deg); }
        50% { transform: translate(20px, -30px) rotate(-90deg); }
    }

    keyframes float3 {
        0%, 100% { transform: translate(0, 0) rotate(0deg); }
        50% { transform: translate(-10px, 20px) rotate(45deg); }
    }

    keyframes float4 {
        0%, 100% { transform: translate(0, 0) rotate(0deg); }
        50% { transform: translate(15px, -15px) rotate(-45deg); }
    }

    .page-content {
        position: relative;
        z-index: 2;
        padding: 2.5rem 1.5rem;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3.5rem;
        color: #fff;
    }

    .header-content {
        max-width: 650px;
        margin: 0 auto;
    }

    .logo {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1.2rem;
        margin-bottom: 1.2rem;
    }

    .logo-icon {
        color: #fff;
        opacity: 0.95;
    }

    .logo h1 {
        font-size: 2.4rem;
        font-weight: 800;
        margin: 0;
        letter-spacing: -0.02em;
    }

    .page-subtitle {
        font-size: 1.15rem;
        opacity: 0.85;
        line-height: 1.7;
        font-weight: 400;
    }

    .form-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
    }

    .form-wrapper {
        width: 100%;
        max-width: 620px;
        background: #fff;
        border-radius: 30px;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.9);
        overflow: hidden;
        transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .form-wrapper:hover {
        transform: translateY(-5px);
        box-shadow: 0 30px 60px rgba(0, 0, 0, 0.25);
    }

    .form-header {
        background: linear-gradient(135deg, #ff6f61 0%, #de5c9d 100%); /* Sunset-inspired form header */
        color: #fff;
        padding: 2.2rem;
        text-align: center;
    }

    .form-header h2 {
        font-size: 1.9rem;
        font-weight: 700;
        margin-bottom: 0.6rem;
    }

    .form-header p {
        opacity: 0.9;
        font-size: 1.05rem;
    }

    .form-content {
        padding: 2.8rem;
    }

    .form-group {
        margin-bottom: 2.2rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.8rem;
    }

    .input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
    }

    .textarea-wrapper {
        align-items: flex-start;
    }

    .textarea-wrapper .input-icon {
        top: 1.2rem;
    }

    .input-icon {
        position: absolute;
        left: 1.2rem;
        top: 50%;
        transform: translateY(-50%);
        z-index: 2;
        color: #a69f9f;
        transition: color 0.3s ease;
    }

    .form-input {
        width: 100%;
        padding: 1.1rem 1.1rem 1.1rem 3.5rem;
        border: 2px solid #f1e7e7;
        border-radius: 14px;
        font-size: 1rem;
        background: #fdfdfd;
        transition: all 0.4s ease;
        outline: none;
        font-family: inherit;
        resize: vertical;
    }

    .form-textarea {
        min-height: 130px;
        padding-top: 1.2rem;
    }

    .form-input:focus {
        border-color: #ff6f61;
        background: #fff;
        box-shadow: 0 0 0 4px rgba(255, 111, 97, 0.15);
    }

    .form-input:focus + .form-label,
    .input-wrapper.focused .form-label {
        transform: translateY(-2.8rem) scale(0.85);
        color: #ff6f61;
        background: #fff;
        padding: 0 0.6rem;
    }

    .form-input:focus ~ .input-icon,
    .input-wrapper.focused .input-icon {
        color: #ff6f61;
    }

    .form-label {
        position: absolute;
        left: 3.5rem;
        top: 50%;
        transform: translateY(-50%);
        color: #a69f9f;
        font-size: 1rem;
        pointer-events: none;
        transition: all 0.4s ease;
        z-index: 1;
    }

    .textarea-wrapper .form-label {
        top: 1.2rem;
        transform: translateY(0);
    }

    .textarea-wrapper.focused .form-label {
        transform: translateY(-2.8rem) scale(0.85);
    }

    .form-actions {
        display: flex;
        gap: 1.2rem;
        margin-top: 2.8rem;
    }

    .btn-primary,
    .btn-secondary {
        flex: 1;
        padding: 1.1rem 2.2rem;
        border: none;
        border-radius: 14px;
        font-size: 1.05rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.6rem;
        transition: all 0.4s ease;
        font-family: inherit;
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff6f61 0%, #de5c9d 100%);
        color: #fff;
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(255, 111, 97, 0.35);
    }

    .btn-secondary {
        background: #fff5f5;
        color: #6b5b5b;
        border: 2px solid #f1e7e7;
    }

    .btn-secondary:hover {
        background: #f1e7e7;
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    }

    .btn-primary:active,
    .btn-secondary:active {
        transform: translateY(0);
    }

    .alert {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        padding: 1.2rem;
        border-radius: 14px;
        margin-top: 1.8rem;
        font-size: 0.95rem;
    }

    .alert-success {
        background: rgba(46, 125, 50, 0.1);
        color: #1b5e20;
        border: 1px solid rgba(46, 125, 50, 0.25);
    }

    .alert-error {
        background: rgba(211, 47, 47, 0.1);
        color: #b71c1c;
        border: 1px solid rgba(211, 47, 47, 0.25);
    }

    .field-error {
        color: #d32f2f;
        font-size: 0.9rem;
        margin-top: 0.6rem;
        display: block;
    }

    .input-validation-error {
        border-color: #d32f2f !important;
        box-shadow: 0 0 0 4px rgba(211, 47, 47, 0.15) !important;
    }

    /* Mobile Responsiveness */
    media (max-width: 768px) {
        .page-content {
            padding: 1.5rem 0.8rem;
        }

        .logo h1 {
            font-size: 2rem;
        }

        .logo {
            flex-direction: column;
            gap: 0.6rem;
        }

        .form-content {
            padding: 2.2rem 1.8rem;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 1.8rem;
        }

        .form-actions {
            flex-direction: column;
        }

        .form-header {
            padding: 1.8rem;
        }

        .form-header h2 {
            font-size: 1.7rem;
        }
    }

    media (max-width: 480px) {
        .form-content {
            padding: 1.8rem 1.2rem;
        }

        .form-wrapper {
            margin: 0 0.8rem;
            border-radius: 24px;
        }

        .page-header {
            margin-bottom: 2.5rem;
        }
    }
</style>