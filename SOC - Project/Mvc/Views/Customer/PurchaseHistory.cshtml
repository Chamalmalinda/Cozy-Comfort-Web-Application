@model IEnumerable<Mvc.Models.mvcPurchaseModel>

@{
    ViewBag.Title = "Purchase History";
}

<div class="page-container">
    <!-- Background Elements -->
    <div class="bg-shapes">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <div class="shape shape-3"></div>
        <div class="shape shape-4"></div>
    </div>

    <!-- Modern Navbar -->
    <nav class="modern-navbar">
        <div class="navbar-container">
            <div class="navbar-brand">
                <div class="brand-logo">
                    <div class="logo-icon">
                        <svg width="32" height="32" viewBox="0 0 48 48" fill="none">
                            <path d="M24 4L44 14V34L24 44L4 34V14L24 4Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round" />
                            <path d="M24 4V44" stroke="currentColor" stroke-width="2" />
                            <path d="M4 14L44 34" stroke="currentColor" stroke-width="2" />
                            <path d="M44 14L4 34" stroke="currentColor" stroke-width="2" />
                        </svg>
                    </div>
                    <span class="brand-text">Cozy Comfort</span>
                </div>
                <span class="portal-text">Customer Portal</span>
            </div>
            <div class="navbar-menu">
                <div class="user-info">
                    <span class="welcome-text">Welcome, @Session["UserName"]</span>
                </div>
                <a href="@Url.Action("Logout", "Login")" class="logout-btn">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                        <polyline points="16,17 21,12 16,7"></polyline>
                        <line x1="21" y1="12" x2="9" y2="12"></line>
                    </svg>
                    Logout
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <div class="content-container">
            <!-- Header Section -->
            <div class="page-header">
                <div class="header-content">
                    <h1 class="page-title">Purchase History</h1>
                    <nav class="breadcrumb-nav">
                        <a href="@Url.Action("Home", "Customer")" class="breadcrumb-link">Dashboard</a>
                        <span class="breadcrumb-separator">/</span>
                        <span class="breadcrumb-current">Purchase History</span>
                    </nav>
                </div>
                <div class="header-actions">
                    <a href="@Url.Action("Home", "Customer")" class="btn btn-secondary">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M19 12H5"></path>
                            <path d="M12 19l-7-7 7-7"></path>
                        </svg>
                        Back to Dashboard
                    </a>
                    <a href="@Url.Action("AvailableProducts", "Customer")" class="btn btn-primary">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M12 5v14"></path>
                            <path d="M5 12h14"></path>
                        </svg>
                        Make New Purchase
                    </a>
                </div>
            </div>

            @if (Model != null && Model.Any())
            {
                <!-- Statistics Cards -->
                <div class="stats-grid">
                    <div class="stat-card stat-primary">
                        <div class="stat-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                                <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                            </svg>
                        </div>
                        <div class="stat-content">
                            <div class="stat-value">@Model.Count()</div>
                            <div class="stat-label">Total Orders</div>
                        </div>
                    </div>

                    <div class="stat-card stat-success">
                        <div class="stat-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
                                <polyline points="3.27,6.96 12,12.01 20.73,6.96"></polyline>
                                <line x1="12" y1="22.08" x2="12" y2="12"></line>
                            </svg>
                        </div>
                        <div class="stat-content">
                            <div class="stat-value">@Model.Sum(m => m.PurchasedQuantity)</div>
                            <div class="stat-label">Total Items | Purchased</div>
                        </div>
                    </div>

                    <div class="stat-card stat-info">
                        <div class="stat-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="12" y1="1" x2="12" y2="23"></line>
                                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                            </svg>
                        </div>
                        <div class="stat-content">
                            <div class="stat-value">$@Model.Sum(m => m.TotalAmount).ToString("F2")</div>
                            <div class="stat-label">Total Spent</div>
                        </div>
                    </div>
                </div>

                <!-- Purchase History Table -->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">Your Purchase Records</h3>
                        <div class="card-subtitle">Manage and track all your purchases</div>
                    </div>
                    <div class="card-content">
                        <div class="table-container">
                            <table class="modern-table">
                                <thead>
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Product Name</th>
                                        <th>Quantity</th>
                                        <th>Total Amount</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.OrderByDescending(m => m.PurchaseId))
                                    {
                                        <tr>
                                            <td>
                                                <div class="order-id">
                                                    <span class="id-badge">#@Html.DisplayFor(modelItem => item.PurchaseId)</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="product-info">
                                                    <span class="product-name">@Html.DisplayFor(modelItem => item.Productname)</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="quantity-badge">
                                                    <span class="quantity-value">@Html.DisplayFor(modelItem => item.PurchasedQuantity)</span>
                                                    <span class="quantity-unit">units</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="amount-display">
                                                    <span class="currency">$</span>
                                                    <span class="amount">@Html.DisplayFor(modelItem => item.TotalAmount)</span>
                                                </div>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("PurchaseDetails", "Customer", new { id = item.PurchaseId })"
                                                   class="action-btn">
                                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                                        <circle cx="12" cy="12" r="3"></circle>
                                                    </svg>
                                                    View Details
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="empty-state">
                    <div class="empty-icon">
                        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <circle cx="9" cy="21" r="1"></circle>
                            <circle cx="20" cy="21" r="1"></circle>
                            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                        </svg>
                    </div>
                    <h3 class="empty-title">No Purchase History Found</h3>
                    <p class="empty-description">You haven't made any purchases yet. Start by browsing our available products.</p>
                    <a href="@Url.Action("AvailableProducts", "Customer")" class="btn btn-primary">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="9" cy="21" r="1"></circle>
                            <circle cx="20" cy="21" r="1"></circle>
                            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                        </svg>
                        Browse Products
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="toast toast-success">
        <div class="toast-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22,4 12,14.01 9,11.01"></polyline>
            </svg>
        </div>
        <div class="toast-content">
            <span>@TempData["SuccessMessage"]</span>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="toast toast-error">
        <div class="toast-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="15" y1="9" x2="9" y2="15"></line>
                <line x1="9" y1="9" x2="15" y2="15"></line>
            </svg>
        </div>
        <div class="toast-content">
            <span>@TempData["ErrorMessage"]</span>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
    </div>
}

<style>
    /* Resetting default styles */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    /* Setting up font and body styling */
    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        background: #fff7f0;
        color: #2d1a3f;
        line-height: 1.6;
    }

    /* Main container with sunset gradient */
    .page-container {
        min-height: 100vh;
        position: relative;
        background: linear-gradient(135deg, #ff6b6b 0%, #ff8e53 50%, #c71585 100%);
    }

    /* Background shapes for decorative effect */
    .bg-shapes {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 1;
    }

    .shape {
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        animation: float 8s ease-in-out infinite;
    }

    .shape-1 {
        width: 320px;
        height: 320px;
        top: 5%;
        left: 5%;
        animation-delay: 0s;
    }

    .shape-2 {
        width: 220px;
        height: 220px;
        top: 50%;
        right: 10%;
        animation-delay: 2s;
    }

    .shape-3 {
        width: 160px;
        height: 160px;
        bottom: 15%;
        left: 15%;
        animation-delay: 4s;
    }

    .shape-4 {
        width: 120px;
        height: 120px;
        top: 25%;
        right: 25%;
        animation-delay: 6s;
    }

    /* Float animation for background shapes */
    keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
        }
        50% {
            transform: translateY(-25px) rotate(180deg);
        }
    }

    /* Navbar styling */
    .modern-navbar {
        position: relative;
        z-index: 10;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(15px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.3);
        padding: 1.2rem 0;
    }

    .navbar-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .navbar-brand {
        display: flex;
        align-items: center;
        gap: 1.2rem;
    }

    .brand-logo {
        display: flex;
        align-items: center;
        gap: 0.6rem;
    }

    .logo-icon {
        color: #ff6b6b;
    }

    .brand-text {
        font-size: 1.3rem;
        font-weight: 700;
        color: #2d1a3f;
    }

    .portal-text {
        color: #4a3c5b;
        font-size: 0.95rem;
        font-weight: 500;
    }

    .navbar-menu {
        display: flex;
        align-items: center;
        gap: 1.8rem;
    }

    .welcome-text {
        color: #4a3c5b;
        font-weight: 500;
    }

    .logout-btn {
        display: flex;
        align-items: center;
        gap: 0.6rem;
        color: white;
        background: linear-gradient(135deg, #ff8e53 0%, #c71585 100%);
        text-decoration: none;
        font-weight: 500;
        padding: 0.6rem 1.2rem;
        border-radius: 10px;
        transition: all 0.4s ease;
    }

    .logout-btn:hover {
        background: linear-gradient(135deg, #ff8e53 20%, #c71585 80%);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 142, 83, 0.3);
    }

    /* Main content styling */
    .main-content {
        position: relative;
        z-index: 2;
        padding: 2.5rem 0;
        min-height: calc(100vh - 80px);
    }

    .content-container {
        max-width: 1280px;
        margin: 0 auto;
        padding: 0 2.5rem;
    }

    /* Page header styling */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 2.5rem;
        background: rgba(255, 255, 255, 0.92);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 2.5rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.12);
    }

    .header-content h1 {
        font-size: 2.75rem;
        font-weight: 700;
        color: #2d1a3f;
        margin-bottom: 0.6rem;
    }

    .breadcrumb-nav {
        display: flex;
        align-items: center;
        gap: 0.6rem;
        font-size: 0.95rem;
    }

    .breadcrumb-link {
        color: #ff8e53;
        text-decoration: none;
        font-weight: 500;
    }

    .breadcrumb-link:hover {
        color: #e07b39;
    }

    .breadcrumb-separator {
        color: #6b5b7a;
    }

    .breadcrumb-current {
        color: #4a3c5b;
    }

    .header-actions {
        display: flex;
        gap: 1.2rem;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.6rem;
        padding: 0.9rem 1.8rem;
        border-radius: 14px;
        font-weight: 600;
        text-decoration: none;
        border: none;
        cursor: pointer;
        transition: all 0.4s ease;
        font-size: 0.95rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff8e53 0%, #c71585 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(255, 142, 83, 0.4);
    }

    .btn-secondary {
        background: #f5e7e2;
        color: #4a3c5b;
        border: 1px solid #f3e8e6;
    }

    .btn-secondary:hover {
        background: #f0d8d2;
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
    }

    /* Statistics cards styling */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.8rem;
        margin-bottom: 2.5rem;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.92);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 2.5rem;
        display: flex;
        align-items: center;
        gap: 1.8rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.12);
        border: 1px solid rgba(255, 255, 255, 0.3);
        transition: transform 0.4s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
    }

    .stat-icon {
        width: 64px;
        height: 64px;
        border-radius: 14px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .stat-primary .stat-icon {
        background: rgba(255, 142, 83, 0.15);
        color: #ff8e53;
    }

    .stat-success .stat-icon {
        background: rgba(199, 21, 133, 0.15);
        color: #c71585;
    }

    .stat-info .stat-icon {
        background: rgba(255, 107, 107, 0.15);
        color: #ff6b6b;
    }

    .stat-value {
        font-size: 2.25rem;
        font-weight: 700;
        color: #2d1a3f;
        line-height: 1;
    }

    .stat-label {
        color: #4a3c5b;
        font-weight: 500;
        margin-top: 0.3rem;
    }

    /* Data card styling */
    .data-card {
        background: rgba(255, 255, 255, 0.92);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.12);
        border: 1px solid rgba(255, 255, 255, 0.3);
        overflow: hidden;
    }

    .card-header {
        padding: 2.5rem 2.5rem 1.2rem;
        border-bottom: 1px solid #f3e8e6;
    }

    .card-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #2d1a3f;
        margin-bottom: 0.3rem;
    }

    .card-subtitle {
        color: #4a3c5b;
        font-size: 0.95rem;
    }

    .card-content {
        padding: 0;
    }

    .table-container {
        overflow-x: auto;
    }

    .modern-table {
        width: 100%;
        border-collapse: collapse;
    }

    .modern-table th {
        background: #fff7f0;
        color: #4a3c5b;
        font-weight: 600;
        padding: 1.2rem 2.5rem;
        text-align: left;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        border-bottom: 1px solid #f3e8e6;
    }

    .modern-table td {
        padding: 1.8rem 2.5rem;
        border-bottom: 1px solid #f5e7e2;
        vertical-align: middle;
    }

    .modern-table tr:hover {
        background: #fff7f0;
    }

    .id-badge {
        background: #f5e7e2;
        color: #4a3c5b;
        padding: 0.3rem 0.9rem;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .product-name {
        font-weight: 600;
        color: #2d1a3f;
    }

    .quantity-badge {
        display: flex;
        align-items: center;
        gap: 0.3rem;
        background: rgba(199, 21, 133, 0.15);
        color: #c71585;
        padding: 0.3rem 0.9rem;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 600;
        width: fit-content;
    }

    .amount-display {
        display: flex;
        align-items: center;
        gap: 0.3rem;
        font-weight: 700;
        color: #d97706;
        font-size: 1.15rem;
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.6rem;
        padding: 0.6rem 1.2rem;
        background: rgba(255, 142, 83, 0.15);
        color: #ff8e53;
        text-decoration: none;
        border-radius: 10px;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.4s ease;
    }

    .action-btn:hover {
        background: #ff8e53;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 142, 83, 0.3);
    }

    /* Empty state styling */
    .empty-state {
        text-align: center;
        padding: 5rem 2.5rem;
        background: rgba(255, 255, 255, 0.92);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.12);
    }

    .empty-icon {
        color: #6b5b7a;
        margin-bottom: 1.8rem;
    }

    .empty-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #2d1a3f;
        margin-bottom: 0.6rem;
    }

    .empty-description {
        color: #4a3c5b;
        margin-bottom: 2.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Toast notifications styling */
    .toast {
        position: fixed;
        top: 2.5rem;
        right: 2.5rem;
        display: flex;
        align-items: center;
        gap: 1.2rem;
        padding: 1.2rem 1.8rem;
        border-radius: 14px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.12);
        z-index: 1000;
        backdrop-filter: blur(15px);
        max-width: 400px;
    }

    .toast-success {
        background: rgba(220, 38, 38, 0.9);
        color: white;
        border: 1px solid rgba(220, 38, 38, 0.25);
    }

    .toast-error {
        background: rgba(199, 21, 133, 0.9);
        color: white;
        border: 1px solid rgba(199, 21, 133, 0.25);
    }

    .toast-close {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0.3rem;
        border-radius: 6px;
        opacity: 0.7;
        transition: opacity 0.4s ease;
    }

    .toast-close:hover {
        opacity: 1;
    }

    /* Mobile responsiveness */
    media (max-width: 768px) {
        .navbar-container {
            padding: 0 1.5rem;
        }

        .navbar-menu {
            flex-direction: column;
            gap: 0.6rem;
            align-items: flex-end;
        }

        .main-content {
            padding: 1.5rem 0;
        }

        .content-container {
            padding: 0 1.5rem;
        }

        .page-header {
            flex-direction: column;
            gap: 1.5rem;
            padding: 1.8rem;
        }

        .header-actions {
            flex-direction: column;
            width: 100%;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }

        .stats-grid {
            grid-template-columns: 1fr;
            gap: 1.2rem;
        }

        .modern-table th,
        .modern-table td {
            padding: 1.2rem 1.5rem;
        }

        .empty-state {
            padding: 3rem 1.5rem;
        }
    }
</style>