@model Mvc.Models.mvcPurchaseModel

@{
    ViewBag.Title = "Purchase Product";
}

<div class="purchase-container">
    <!-- Background Elements -->
    <div class="bg-shapes">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <div class="shape shape-3"></div>
    </div>

    <!-- Navbar -->
    <nav class="modern-navbar">
        <div class="nav-container">
            <div class="nav-brand">
                <div class="logo-icon">
                    <svg width="32" height="32" viewBox="0 0 48 48" fill="none">
                        <path d="M24 4L44 14V34L24 44L4 34V14L24 4Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round" />
                    </svg>
                </div>
                <span>Cozy Comfort</span>
            </div>
            <div class="nav-links">
                <span class="welcome-text">Welcome, @Session["UserName"]</span>
                <a href="@Url.Action("Logout", "Login")" class="logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <div class="content-wrapper">
            <!-- Breadcrumb -->
            <nav class="breadcrumb-nav">
                <div class="breadcrumb-item"><a href="@Url.Action("Home", "Customer")">Dashboard</a></div>
                <div class="breadcrumb-divider">›</div>
                <div class="breadcrumb-item"><a href="@Url.Action("AvailableProducts", "Customer")">Products</a></div>
                <div class="breadcrumb-divider">›</div>
                <div class="breadcrumb-item active">Purchase</div>
            </nav>

            <!-- Purchase Card -->
            <div class="purchase-card">
                <div class="card-header">
                    <h2>Purchase: @ViewBag.BlanketName</h2>
                </div>

                <div class="card-body">
                    <!-- Product Info Grid -->
                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">Product Name</span>
                            <span class="info-value">@ViewBag.BlanketName</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Price per Unit</span>
                            <span class="info-value price">$@ViewBag.BlanketPrice</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Available Quantity</span>
                            <span class="info-value quantity">@ViewBag.AvailableQuantity units</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Buyer</span>
                            <span class="info-value">@Session["UserName"]</span>
                        </div>
                    </div>

                    <!-- Purchase Form -->
                    @using (Html.BeginForm("PurchaseProduct", "Customer", FormMethod.Post, new { @class = "purchase-form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Productname)
                        @Html.HiddenFor(model => model.UserName)
                        @Html.Hidden("blanketPrice", (int)(ViewBag.BlanketPrice ?? 0))
                        @Html.Hidden("blanketId", (int)(ViewBag.BlanketId ?? 0))

                        <div class="form-row">
                            <div class="form-group">
                                <div class="input-wrapper">
                                    @Html.EditorFor(model => model.PurchasedQuantity, new
                                    {
                                        htmlAttributes = new
                                        {
                                            @class = "form-input",
                                            @id = "quantityInput",
                                            @max = ViewBag.AvailableQuantity,
                                            @min = "1",
                                            @type = "number",
                                            @placeholder = "Enter quantity"
                                        }
                                    })
                                    @Html.LabelFor(model => model.PurchasedQuantity, "Quantity to Purchase", new { @class = "form-label" })
                                </div>
                                @Html.ValidationMessageFor(model => model.PurchasedQuantity, "", new { @class = "field-error" })
                            </div>

                            <div class="form-group">
                                <div class="input-wrapper">
                                    <div class="form-input total-display" id="totalAmount">$0.00</div>
                                    <label class="form-label">Total Amount</label>
                                    @Html.HiddenFor(model => model.TotalAmount, new { @id = "hiddenTotalAmount" })
                                </div>
                            </div>
                        </div>

                        <!-- Order Summary -->
                        <div class="order-summary" id="orderSummary" style="display: none;">
                            <div class="summary-header">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <path d="M12 6v6l4 2"></path>
                                </svg>
                                <span>Order Summary</span>
                            </div>
                            <div class="summary-details">
                                <div class="summary-row">
                                    <span>Product:</span>
                                    <span>@ViewBag.BlanketName</span>
                                </div>
                                <div class="summary-row">
                                    <span>Unit Price:</span>
                                    <span>$@ViewBag.BlanketPrice</span>
                                </div>
                                <div class="summary-row">
                                    <span>Quantity:</span>
                                    <span><span id="summaryQuantity">0</span> units</span>
                                </div>
                                <div class="summary-row total-row">
                                    <span>Total:</span>
                                    <span>$<span id="summaryTotal">0.00</span></span>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-actions">
                            <a href="@Url.Action("AvailableProducts", "Customer")" class="btn-secondary">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M19 12H5"></path>
                                    <path d="M12 19l-7-7 7-7"></path>
                                </svg>
                                Back to Products
                            </a>
                            <button type="submit" class="btn-primary" id="purchaseBtn" disabled>
                                <span>Complete Purchase</span>
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M5 12h14"></path>
                                    <path d="M12 5l7 7-7 7"></path>
                                </svg>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
            <polyline points="22,4 12,14.01 9,11.01"></polyline>
        </svg>
        <span>@TempData["SuccessMessage"]</span>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-error">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="15" y1="9" x2="9" y2="15"></line>
            <line x1="9" y1="9" x2="15" y2="15"></line>
        </svg>
        <span>@TempData["ErrorMessage"]</span>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var unitPrice = @ViewBag.BlanketPrice;
            var maxQuantity = @ViewBag.AvailableQuantity;
            var quantityInput = document.getElementById('quantityInput');
            var totalAmount = document.getElementById('totalAmount');
            var hiddenTotal = document.getElementById('hiddenTotalAmount');
            var orderSummary = document.getElementById('orderSummary');
            var purchaseBtn = document.getElementById('purchaseBtn');

            function updateTotals() {
                var quantity = parseInt(quantityInput.value) || 0;
                var total = quantity * unitPrice;

                totalAmount.textContent = '$' + total.toFixed(2);
                hiddenTotal.value = total;
                document.getElementById('summaryQuantity').textContent = quantity;
                document.getElementById('summaryTotal').textContent = total.toFixed(2);

                var isValid = quantity > 0 && quantity <= maxQuantity;

                if (isValid) {
                    orderSummary.style.display = 'block';
                    purchaseBtn.disabled = false;
                    quantityInput.classList.remove('error');
                    quantityInput.parentElement.classList.add('focused');
                } else {
                    orderSummary.style.display = 'none';
                    purchaseBtn.disabled = true;
                    if (quantity > 0) {
                        quantityInput.classList.add('error');
                    }
                }
            }

            quantityInput.addEventListener('input', updateTotals);
            quantityInput.addEventListener('focus', function() {
                this.parentElement.classList.add('focused');
            });
            quantityInput.addEventListener('blur', function() {
                if (!this.value) {
                    this.parentElement.classList.remove('focused');
                }
            });

            // Initialize
            if (quantityInput.value) {
                quantityInput.parentElement.classList.add('focused');
                updateTotals();
            }
        });
    </script>
}

<style>
/* Setting up basic styling for all elements */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Setting up font and overflow */
body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    overflow-x: hidden;
}

/* Main container with sunset gradient */
.purchase-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #ff6b6b 0%, #ff8e53 50%, #c71585 100%);
    position: relative;
}

/* Background shapes for decorative effect */
.bg-shapes {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 1;
}

.shape {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(12px);
    animation: float 8s ease-in-out infinite;
}

.shape-1 {
    width: 220px;
    height: 220px;
    top: 15%;
    left: 5%;
    animation-delay: 0s;
}

.shape-2 {
    width: 180px;
    height: 180px;
    top: 55%;
    right: 10%;
    animation-delay: 3s;
}

.shape-3 {
    width: 120px;
    height: 120px;
    bottom: 15%;
    left: 25%;
    animation-delay: 5s;
}

/* Navbar styling */
.modern-navbar {
    position: relative;
    z-index: 10;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(15px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
    padding: 1.2rem 0;
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-brand {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    font-size: 1.3rem;
    font-weight: 700;
    color: #2d1a3f;
}

.logo-icon {
    color: #ff6b6b;
}

.nav-links {
    display: flex;
    align-items: center;
    gap: 1.8rem;
}

.welcome-text {
    color: #4a3c5b;
    font-weight: 500;
}

.logout-btn {
    background: linear-gradient(135deg, #ff8e53 0%, #c71585 100%);
    color: white;
    padding: 0.6rem 1.2rem;
    border-radius: 10px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.4s ease;
}

.logout-btn:hover {
    transform: translateY(-2px);
    color: white;
    text-decoration: none;
    box-shadow: 0 4px 15px rgba(255, 142, 83, 0.3);
}

/* Main content styling */
.main-content {
    position: relative;
    z-index: 2;
    padding: 2.5rem;
}

.content-wrapper {
    max-width: 960px;
    margin: 0 auto;
}

/* Breadcrumb navigation */
.breadcrumb-nav {
    display: flex;
    align-items: center;
    gap: 0.6rem;
    margin-bottom: 2.5rem;
    color: rgba(255, 255, 255, 0.85);
    font-size: 0.95rem;
}

.breadcrumb-item a {
    color: rgba(255, 255, 255, 0.85);
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-item a:hover {
    color: white;
}

.breadcrumb-item.active {
    color: white;
    font-weight: 600;
}

.breadcrumb-divider {
    color: rgba(255, 255, 255, 0.7);
}

/* Purchase card styling */
.purchase-card {
    background: rgba(255, 255, 255, 0.92);
    backdrop-filter: blur(15px);
    border-radius: 28px;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.12);
    border: 1px solid rgba(255, 255, 255, 0.7);
    overflow: hidden;
}

.card-header {
    background: linear-gradient(135deg, #ff6b6b 0%, #c71585 100%);
    color: white;
    padding: 2.2rem;
    text-align: center;
}

.card-header h2 {
    font-size: 1.85rem;
    font-weight: 700;
    margin: 0;
}

.card-body {
    padding: 3rem;
}

/* Info grid styling */
.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.8rem;
    margin-bottom: 2.5rem;
}

.info-item {
    background: #fff7f0;
    padding: 1.5rem;
    border-radius: 14px;
    border-left: 4px solid #ff8e53;
}

.info-label {
    display: block;
    color: #4a3c5b;
    font-size: 0.95rem;
    margin-bottom: 0.6rem;
}

.info-value {
    display: block;
    font-size: 1.15rem;
    font-weight: 600;
    color: #2d1a3f;
}

.info-value.price {
    color: #d97706;
}

.info-value.quantity {
    color: #c71585;
}

/* Form styling */
.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2.5rem;
    margin-bottom: 2.5rem;
}

.form-group {
    position: relative;
}

.input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
}

.form-input {
    width: 100%;
    padding: 1.2rem;
    border: 2px solid #f3e8e6;
    border-radius: 14px;
    font-size: 1rem;
    background: #fffaf7;
    transition: all 0.4s ease;
    outline: none;
}

.form-input:focus {
    border-color: #ff8e53;
    background: white;
    box-shadow: 0 0 0 4px rgba(255, 142, 83, 0.15);
}

.form-input:focus + .form-label,
.input-wrapper.focused .form-label {
    transform: translateY(-2.8rem) scale(0.85);
    color: #ff8e53;
    background: white;
    padding: 0 0.6rem;
}

.form-input.error {
    border-color: #dc2626;
    box-shadow: 0 0 0 4px rgba(220, 38, 38, 0.15);
}

.form-label {
    position: absolute;
    left: 1.2rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6b5b7a;
    font-size: 1rem;
    pointer-events: none;
    transition: all 0.4s ease;
    z-index: 1;
}

.total-display {
    background: #fff0e6 !important;
    color: #b91c1c;
    font-weight: 700;
    font-size: 1.3rem;
    cursor: default;
}

/* Order summary styling */
.order-summary {
    background: linear-gradient(135deg, rgba(255, 142, 83, 0.15) 0%, rgba(199, 21, 133, 0.15) 100%);
    border: 1px solid rgba(255, 142, 83, 0.25);
    border-radius: 18px;
    padding: 1.8rem;
    margin-bottom: 2.5rem;
}

.summary-header {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    color: #ff8e53;
    font-weight: 600;
    margin-bottom: 1.2rem;
}

.summary-details {
    display: flex;
    flex-direction: column;
    gap: 0.9rem;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.summary-row.total-row {
    border-top: 1px solid rgba(255, 142, 83, 0.25);
    padding-top: 0.9rem;
    font-weight: 700;
    font-size: 1.15rem;
    color: #ff6b6b;
}

/* Button styling */
.form-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1.2rem;
}

.btn-primary, .btn-secondary {
    padding: 1.2rem 2.2rem;
    border-radius: 14px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.6rem;
    transition: all 0.4s ease;
    text-decoration: none;
    border: none;
}

.btn-primary {
    background: linear-gradient(135deg, #ff8e53 0%, #c71585 100%);
    color: white;
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 10px 30px rgba(255, 142, 83, 0.4);
    color: white;
}

.btn-primary:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}

.btn-secondary {
    background: #f5e7e2;
    color: #4a3c5b;
    border: 2px solid #f3e8e6;
}

.btn-secondary:hover {
    background: #f0d8d2;
    color: #3b2d4a;
    transform: translateY(-2px);
    text-decoration: none;
}

/* Alert styling */
.alert {
    position: fixed;
    top: 2rem;
    right: 2rem;
    z-index: 1000;
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 1.2rem 1.8rem;
    border-radius: 14px;
    font-size: 0.95rem;
    max-width: 400px;
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
}

.alert-success {
    background: rgba(220, 38, 38, 0.9);
    color: white;
    border: 1px solid rgba(220, 38, 38, 0.25);
}

.alert-error {
    background: rgba(199, 21, 133, 0.9);
    color: white;
    border: 1px solid rgba(199, 21, 133, 0.25);
}

.field-error {
    color: #dc2626;
    font-size: 0.9rem;
    margin-top: 0.6rem;
    display: block;
}

/* Animation keyframes */
keyframes float {
    0%, 100% {
        transform: translateY(0px) rotate(0deg);
    }
    50% {
        transform: translateY(-25px) rotate(180deg);
    }
}

/* Mobile responsiveness */
media (max-width: 768px) {
    .nav-container {
        padding: 0 1.2rem;
    }

    .nav-links {
        flex-direction: column;
        gap: 0.6rem;
        align-items: flex-end;
    }

    .main-content {
        padding: 1.5rem;
    }

    .card-body {
        padding: 2rem;
    }

    .form-row {
        grid-template-columns: 1fr;
        gap: 1.8rem;
    }

    .form-actions {
        flex-direction: column-reverse;
        align-items: stretch;
    }

    .btn-primary, .btn-secondary {
        justify-content: center;
    }

    .info-grid {
        grid-template-columns: 1fr;
        gap: 1.2rem;
    }
}
</style>